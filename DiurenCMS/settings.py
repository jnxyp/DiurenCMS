"""
Django settings for DiurenCMS project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
import logging
import os
from django.utils.translation import gettext, gettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
from .credentials import SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'DiurenUtility.apps.DiurenutilityConfig',
    'DiurenAccount.apps.DiurenaccountConfig',
    'DiurenCloud.apps.DiurencloudConfig',
    'DiurenForum.apps.DiurenforumConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'DiurenUtility.middleware.session_language_middleware.SessionLanguageMiddleware',
]

ROOT_URLCONF = 'DiurenCMS.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.i18n',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'DiurenUtility.context_processors.inject_settings',
                'DiurenUtility.context_processors.inject_app_configs',
                'DiurenAccount.context_processors.inject_profile',
                'DiurenCloud.context_processors.inject_cloud_user',
            ],
            'debug': DEBUG,
            'string_if_invalid': '⚠无效变量⚠' if DEBUG else '',
        },
    },
]

WSGI_APPLICATION = 'DiurenCMS.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# 注意：添加语言时需要更新
# DiurenUtility.middleware.session_language_middleware.py
# 中的 LANGUAGE_CODE_MAPPING
LANGUAGES = (
    ('en', 'English'),
    ('zh-hans', '中文简体'),
    ('zh-hant', '中文繁體'),
)

LANGUAGE_COOKIE_NAME = 'i18n_lang'

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'languages'),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = 'static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = 'media/'

# 默认登陆页
LOGIN_URL = '/account/login'
# 默认登陆后重定向页
LOGIN_REDIRECT_URL = '/account/user'

# 自定义设置选项
VERBOSE_NAME = _('远行星号中文社区')
COPYRIGHT = _('丢人CMS - 2019 jn_xyp 版权所有 <br>'
              '本站使用了 Django, Bootstrap 等开源软件')
VERSION = '1.0.0'

# 邮件发送设置

EMAIL_USE_SSL = True
# EMAIL_HOST = 'XXXXXXXXX'
# EMAIL_PORT = 'XXX'
# EMAIL_HOST_USER = 'XXXXXXXXXXXXXXX'
# EMAIL_HOST_PASSWORD = 'XXXXXXXXXXXXXXXXX'
from .credentials import EMAIL_HOST, EMAIL_PORT, EMAIL_HOST_PASSWORD, EMAIL_HOST_USER

DEFAULT_FROM_EMAIL = 'system@fossic.org'

if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# 阿里云OSS设置
USE_OSS = False

if USE_OSS:
    DEFAULT_FILE_STORAGE = 'DiurenUtility.aliyun_oss.storage.AliyunMediaStorage'
    STATICFILES_STORAGE = 'DiurenUtility.aliyun_oss.storage.AliyunStaticStorage'

    # ALIYUN_OSS_STORAGE = {
    #     'ACCESS_KEY_ID': 'XXXXXXXXXXXX',
    #     'ACCESS_KEY_SECRET': 'XXXXXXXXXXXXXXXXXXXXXXXXXXXX',
    #     'END_POINT': 'https://XXX.aliyuncs.com',
    #     'BUCKET_NAME': 'XXXXXXXX',
    #     'ALIYUN_OSS_CNAME': XXXXXXXXXX or None,
    # }
    from .credentials import ALIYUN_OSS_STORAGE

# 日志输出设置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] [{name}:<{module}.{funcName}> {asctime}] {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'DiurenAccount': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'filters': ['require_debug_true']
        },
        'DiurenUtility': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'filters': ['require_debug_true']
        },
        'DiurenCloud': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'filters': ['require_debug_true']
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'filters': ['require_debug_true']
        }
    }
}
